@article{formal_flow,
author = {K.M. Kavi and B.P. Buckles and U.N. Bhat},
title = {A Formal Definition of Data Flow Graph Models},
journal ={IEEE Transactions on Computers},
volume = {35},
issn = {0018-9340},
year = {1986},
pages = {940-948},
doi = {http://doi.ieeecomputersociety.org/10.1109/TC.1986.1676696},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}


@ARTICLE{dataflow_process_networks, 
author={Lee, E.A. and Parks, T.M.}, 
journal={Proceedings of the IEEE}, 
title={Dataflow process networks}, 
year={1995}, 
month={may}, 
volume={83}, 
number={5}, 
pages={773 -801}, 
abstract={We review a model of computation used in industrial practice in signal processing software environments and experimentally and other contexts. We give this model the name ldquo;dataflow process networks, rdquo; and study its formal properties as well as its utility as a basis for programming language design. Variants of this model are used in commercial visual programming systems such as SPW from the Alta Group of Cadence (formerly Comdisco Systems), COSSAP from Synopsys (formerly Cadis), the DSP Station from Mentor Graphics, and Hypersignal from Hyperception. They are also used in research software such as Khoros from the University of New Mexico and Ptolemy from the University of California at Berkeley, among many others. Dataflow process networks are shown to be a special case of Kahn process networks, a model of computation where a number of concurrent processes communicate through unidirectional FIFO channels, where writes to the channel are nonblocking, and reads are blocking. In dataflow process networks, each process consists of repeated ldquo;firings rdquo; of a dataflow ldquo;actor. rdquo; An actor defines a (often functional) quantum of computation. By dividing processes into actor firings, the considerable overhead of context switching incurred in most implementations of Kahn process networks is avoided. We relate dataflow process networks to other dataflow models, including those used in dataflow machines, such as static dataflow and the tagged-token model. We also relate dataflow process networks to functional languages such as Haskell, and show that modern language concepts such as higher-order functions and polymorphism can be used effectively in dataflow process networks. A number of programming examples using a visual syntax are given}, 
keywords={COSSAP;DSP Station;Haskell;Hypersignal;Kahn process networks;Khoros;SPW;commercial visual programming systems;context switching;dataflow process networks;functional languages;higher-order functions;polymorphism;programming language design;signal processing software environments;static dataflow;tagged-token model;unidirectional FIFO channels;visual syntax;data flow computing;functional languages;parallel programming;programming environments;signal processing;visual languages;visual programming;}, 
doi={10.1109/5.381846}, 
ISSN={0018-9219},}

@ARTICLE{sdf, 
author={Lee, E.A. and Messerschmitt, D.G.}, 
journal={Proceedings of the IEEE}, 
title={Synchronous data flow}, 
year={1987}, 
month={sept.}, 
volume={75}, 
number={9}, 
pages={ 1235 - 1245}, 
abstract={ Data flow is a natural paradigm for describing DSP applications for concurrent implementation on parallel hardware. Data flow programs for signal processing are directed graphs where each node represents a function and each arc represents a signal path. Synchronous data flow (SDF) is a special case of data flow (either atomic or large grain) in which the number of data samples produced or consumed by each node on each invocation is specified a priori. Nodes can be scheduled statically (at compile time) onto single or parallel programmable processors so the run-time overhead usually associated with data flow evaporates. Multiple sample rates within the same system are easily and naturally handled. Conditions for correctness of SDF graph are explained and scheduling algorithms are described for homogeneous parallel processors sharing memory. A preliminary SDF software system for automatically generating assembly language code for DSP microcomputers is described. Two new efficiency techniques are introduced, static buffering and an extension to SDF to efficiently implement conditionals.}, 
keywords={}, 
doi={10.1109/PROC.1987.13876}, 
ISSN={0018-9219},}

@ARTICLE{dennis, 
author={Dennis, J.B.}, 
journal={Computer}, 
title={Data Flow Supercomputers}, 
year={1980}, 
month={nov. }, 
volume={13}, 
number={11}, 
pages={48 -56}, 
abstract={Programmability with increased performance? New strategies to attain this goal include two approaches to data flow architecture: data flow multiprocessors and the cell block architecture.}, 
keywords={}, 
doi={10.1109/MC.1980.1653418}, 
ISSN={0018-9162},}

@article{buck93,
author = {J.T. Buck and E.A. Lee},
title = {Scheduling dynamic dataflow graphs with bounded memory using the token flow model},
journal ={Acoustics, Speech, and Signal Processing, IEEE International Conference on},
volume = {1},
isbn = {0-7803-0946-4},
year = {1993},
pages = {429-432},
doi = {http://doi.ieeecomputersociety.org/10.1109/ICASSP.1993.319147},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}